/*
 * Proximax REST API
 * Proximax REST API
 *
 * OpenAPI spec version: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.nem.xpx;

import io.nem.ApiException;
import io.nem.builder.BinaryTransferTransactionBuilder;
import io.nem.utils.JsonUtils;
import java.io.File;
import java.io.IOException;
import io.nem.xpx.model.BinaryTransactionEncryptedMessage;
import io.nem.xpx.model.RequestAnnounceDataSignature;
import org.junit.Test;
import org.nem.core.crypto.KeyPair;
import org.nem.core.crypto.PrivateKey;
import org.nem.core.crypto.PublicKey;
import org.nem.core.model.Account;
import org.nem.core.model.Address;
import org.nem.core.model.MessageTypes;
import org.nem.core.utils.HexEncoder;
import org.apache.commons.io.FileUtils;
import org.junit.Assert;
import org.junit.Ignore;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PublishAndAnnounceApi
 */
public class PublishAndAnnounceApiTest extends AbstractApiTest {
	private final DataHashApi datahashApi = new DataHashApi();
    private final PublishAndAnnounceApi publishAndAnnounceApi = new PublishAndAnnounceApi();

    
    /**
     * Announce the DataHash to NEM/P2P Storage and P2P Database
     *
     * Endpoint that can be use to announce the data hash transaction. This will grab the signed BinaryTransaferTransaction and create the P2P Database Entry for the specific data hash / transaction.
     *
     * @throws ApiException
     *          if the Api call fails
     * @throws IOException 
     */
    @Test
    public void announceRequestPublishDataSignatureUsingPOSTTest() throws ApiException, IOException {
        
    	//	keywords
        String keywords = "small,file,test";
        
        //	string,string map
		Map<String, String> smallMetadataTest = new HashMap<String, String>();
		smallMetadataTest.put("type", "small");
		smallMetadataTest.put("value", "file");
		String metadata = JsonUtils.toJson(smallMetadataTest);
		
		byte[] encrypted = engine
				.createBlockCipher(new KeyPair(PrivateKey.fromHexString(this.xPvkey), engine),
						new KeyPair(PublicKey.fromHexString(this.xPubkey), engine))
				.encrypt(FileUtils.readFileToByteArray(new File("src\\test\\resources\\small_file_test.txt")));

		// pass the hex encoded string of the data.
		String data = HexEncoder.getString(encrypted);
		BinaryTransactionEncryptedMessage response = datahashApi.uploadJsonDataAndGenerateHashUsingPOST(data, keywords,
				metadata);

		//	Announce The Signature
		RequestAnnounceDataSignature requestAnnounceDataSignature = BinaryTransferTransactionBuilder
				.sender(new Account(new KeyPair(PrivateKey.fromHexString(this.xPvkey))))
				.recipient(new Account(Address.fromPublicKey(PublicKey.fromHexString(this.xPubkey))))
				.message(JsonUtils.toJson(response), MessageTypes.SECURE).buildAndSignTransaction();

		String publishedData = publishAndAnnounceApi.announceRequestPublishDataSignatureUsingPOST(requestAnnounceDataSignature);
		Assert.assertNotNull(publishedData);
		System.out.print(publishedData);

    }
    
    /**
     * Store a single file that can only be access by the given address
     *
     * This endpoint can be used to share a file to a specific address only.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore("This test can only be ran if you're running the node locally. e.i: set the api client base url to localhost")
    public void publishAndSendSingleFileToAddressUsingPOSTTest() throws ApiException {
        String xPvkey = null;
        String address = null;
        String messageType = null;
        File file = null;
        String response = publishAndAnnounceApi.publishAndSendSingleFileToAddressUsingPOST(xPvkey, address, messageType, file);
    }
    
    /**
     * Store a single file that can only be access by the given addresses
     *
     * This endpoint can be used to exclusively share files across a set of given addresses. This means that the file that&#39;s published here can only be viewed or downloaded by the given addresses including the uploader.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore("This test can only be ran if you're running the node locally. e.i: set the api client base url to localhost")
    public void publishAndSendSingleFileToAddressesUsingPOSTTest() throws ApiException {
        String xPvkey = null;
        List<String> addresses = null;
        String messageType = null;
        File file = null;
        String response = publishAndAnnounceApi.publishAndSendSingleFileToAddressesUsingPOST(xPvkey, addresses, messageType, file);
    }
    
}
