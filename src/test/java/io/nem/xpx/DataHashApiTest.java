/*
 * Proximax REST API
 * Proximax REST API
 *
 * OpenAPI spec version: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.nem.xpx;

import io.nem.ApiException;
import io.nem.utils.JsonUtils;
import io.nem.xpx.model.BinaryTransactionEncryptedMessage;
import java.io.File;
import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.util.HashMap;
import java.util.Map;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import io.nem.xpx.model.RequestAnnounceDataSignature;
import org.apache.commons.io.FileUtils;
import org.junit.Assert;
import org.junit.Test;
import org.nem.core.crypto.KeyPair;
import org.nem.core.crypto.PrivateKey;
import org.nem.core.crypto.PublicKey;
import org.nem.core.utils.HexEncoder;

/**
 * API tests for DataHashApi
 */
public class DataHashApiTest extends AbstractApiTest {

	private final DataHashApi api = new DataHashApi();

	/**
	 * Generates the encrypted datahash and uploads the file in the process.
	 *
	 * This endpoint can be used to generates the encrypted datahash and uploads
	 * the file in the process.
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void generateHashAndExposeFileToNetworkUsingPOSTTest() throws ApiException {
		File file = new File("src\\test\\resources\\small_file_test.txt");
		String keywords = null;
		String metadata = null;
		BinaryTransactionEncryptedMessage response = api.generateHashAndExposeFileToNetworkUsingPOST(file, keywords,
				metadata);

		Assert.assertNotNull(response);

	}

	/**
	 * This endpoint can be used to generate the transaction along with the data
	 * hash with the private key signature.
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void generateHashExposeByteArrayToNetworkBuildAndSignUsingPOSTTest() throws ApiException {
		String xPvkey = this.xPvkey;
		String xPubkey = this.xPubkey;
		String messageType = "SECURE";
		String data = "Expose this free form data";
		String keywords = null;
		String metadata = null;
		
		RequestAnnounceDataSignature response = api.generateHashExposeByteArrayToNetworkBuildAndSignUsingPOST(xPvkey,
				xPubkey, messageType, data, keywords, metadata);

		Assert.assertNotNull(response);

		PublishAndAnnounceApi publishAnnounceApi = new PublishAndAnnounceApi();
		String publishResponse = publishAnnounceApi.announceRequestPublishDataSignatureUsingPOST(response);

		Assert.assertNotNull(publishResponse);

	}

	/**
	 * This endpoint can be used to generate the transaction along with the data
	 * hash with the private key signature.
	 *
	 * 
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void generateHashExposeFileToNetworkBuildAndSignUsingPOSTTest() throws ApiException {
		String xPvkey = this.xPvkey;
		String xPubkey = this.xPubkey;
		String messageType = "SECURE";
		File file = new File("src\\test\\resources\\small_file_test.txt");
		String keywords = null;
		String metadata = null;
		RequestAnnounceDataSignature response = api.generateHashExposeFileToNetworkBuildAndSignUsingPOST(xPvkey,
				xPubkey, messageType, file, keywords, metadata);

		Assert.assertNotNull(response);
	}

	/**
	 * Generates the encrypted datahash and uploads the JSON Format String data
	 * to the P2P Storage Network.
	 *
	 * This endpoint can be used to generates the encrypted datahash and uploads
	 * the file in the process.
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 * @throws BadPaddingException
	 * @throws IllegalBlockSizeException
	 * @throws InvalidAlgorithmParameterException
	 * @throws NoSuchPaddingException
	 * @throws NoSuchAlgorithmException
	 * @throws InvalidKeySpecException
	 * @throws InvalidKeyException
	 * @throws IOException
	 */
	@Test
	public void uploadJsonDataAndGenerateHashUsingPOSTTest() throws ApiException, InvalidKeyException,
			InvalidKeySpecException, NoSuchAlgorithmException, NoSuchPaddingException,
			InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException, IOException {

		String keywords = "small,file,test";

		Map<String, String> smallMetadataTest = new HashMap<String, String>();
		smallMetadataTest.put("type", "small");
		smallMetadataTest.put("value", "file");
		String metadata = JsonUtils.toJson(smallMetadataTest);

		byte[] encrypted = engine
				.createBlockCipher(new KeyPair(PrivateKey.fromHexString(this.xPvkey), engine),
						new KeyPair(PublicKey.fromHexString(this.xPubkey), engine))
				.encrypt(FileUtils.readFileToByteArray(new File("src\\test\\resources\\small_file_test.txt")));

		// pass the hex encoded string of the data.
		String data = HexEncoder.getString(encrypted);
		BinaryTransactionEncryptedMessage response = api.uploadJsonDataAndGenerateHashUsingPOST(data, keywords,
				metadata);

		Assert.assertNotNull(response);

	}

}
