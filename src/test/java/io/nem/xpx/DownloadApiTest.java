/*
 * Proximax REST API
 * Proximax REST API
 *
 * OpenAPI spec version: v0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.nem.xpx;

import io.nem.ApiException;
import io.nem.xpx.model.BinaryTransactionEncryptedMessage;
import io.nem.xpx.model.ResponseEntity;
import io.nem.xpx.utils.JsonUtils;

import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import org.nem.core.crypto.KeyPair;
import org.nem.core.crypto.PrivateKey;
import org.nem.core.crypto.PublicKey;
import org.nem.core.messages.SecureMessage;
import org.nem.core.model.Account;
import org.nem.core.model.TransferTransaction;
import org.nem.core.utils.HexEncoder;
import java.io.UnsupportedEncodingException;

/**
 * API tests for DownloadApi.
 */
public class DownloadApiTest extends AbstractApiTest {

	/** The api. */
	private final DownloadApi api = new DownloadApi();

	/**
	 * Download resource/file using NEM Transaction Hash
	 *
	 * This endpoint returns either a byte array format of the actual file OR a
	 * JSON format GenericMessageResponse.
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 */
	@Test
	public void downloadPlainMessageFileUsingNemHashUsingGETTest() throws ApiException {
		String nemhash = this.testnetPlainNemTxnHash;
		ResponseEntity response = api.downloadPlainMessageFileUsingNemHashUsingGET(nemhash);

		Assert.assertNotNull(response);
	}

	/**
	 * Download plain resource/file using NEM Transaction Hash
	 * 
	 * This endpoint returns a byte array format of the actual file.
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 * @throws UnsupportedEncodingException
	 *             the unsupported encoding exception
	 */
	@Test
	@Ignore("This test can only be ran if you're running the node locally. e.i: set the api client base url to localhost")
	public void downloadRawBytesPlainMessageFileUsingNemHashUsingGETTest()
			throws ApiException, UnsupportedEncodingException {
		String nemhash = this.testnetPlainNemTxnHash;
		byte[] response = api.downloadRawBytesPlainMessageFileUsingNemHashUsingGET(nemhash);

		Assert.assertNotNull(new String(response, "UTF-8"));
	}

	/**
	 * Download secured resource/file using NEM Transaction Hash
	 * 
	 * This endpoint returns a byte array format of the actual file.
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 * @throws UnsupportedEncodingException
	 *             the unsupported encoding exception
	 */
	@Test
	@Ignore("This test can only be ran if you're running the node locally. e.i: set the api client base url to localhost")
	public void downloadRawBytesSecureMessageFileUsingNemHashUsingGETTest()
			throws ApiException, UnsupportedEncodingException {

		String xPvkey = this.xPvkey;
		String nemhash = this.testnetSecureNemTxnHash;
		byte[] response = api.downloadRawBytesSecureMessageFileUsingNemHashUsingGET(nemhash, xPvkey);

		Assert.assertNotNull(new String(response, "UTF-8"));
	}

	/**
	 * Download raw bytes using hash using POST test.
	 */
	@Test
	public void downloadRawBytesUsingHashUsingPOSTTest() {
		byte[] securedResponse;
		try {
			TransferTransaction transaction = (TransferTransaction) TransactionApi
					.getTransaction(this.testnetSecureNemTxnHash).getEntity();
			SecureMessage message = SecureMessage.fromEncodedPayload(
					new Account(new KeyPair(PrivateKey.fromHexString(this.xPvkey))),
					new Account(new KeyPair(PublicKey.fromHexString(this.xPubkey))),
					transaction.getMessage().getEncodedPayload());

			BinaryTransactionEncryptedMessage binaryEncryptedData = JsonUtils
					.fromJson(new String(message.getDecodedPayload()), BinaryTransactionEncryptedMessage.class);

			// Grab the Hash.
			securedResponse = api.downloadStreamUsingHashUsingPOST(binaryEncryptedData.getHash());

			// Decrypt with NEM Keys
			byte[] decrypted = engine
					.createBlockCipher(new KeyPair(PublicKey.fromHexString(this.xPubkey), engine),
							new KeyPair(PrivateKey.fromHexString(this.xPvkey), engine))
					.decrypt(HexEncoder.getBytes(new String(securedResponse, "UTF-8")));

			Assert.assertEquals("Assertion failed: Decryted data is not equal to expected",
					"This is a small file for SDK Testing", new String(decrypted, "UTF-8"));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Download plain resource/file using NEM Transaction Hash
	 * 
	 * This endpoint returns a byte array format of the actual file.
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 * @throws UnsupportedEncodingException
	 *             the unsupported encoding exception
	 */
	@Test
	public void downloadStreamPlainMessageFileUsingNemHashUsingGETTest()
			throws ApiException, UnsupportedEncodingException {
		String nemhash = this.testnetPlainNemTxnHash;
		byte[] response = api.downloadStreamPlainMessageFileUsingNemHashUsingGET(nemhash);
		Assert.assertNotNull(new String(response, "UTF-8"));
	}

	/**
	 * Download secured resource/file using NEM Transaction Hash
	 * 
	 * This endpoint returns a byte array format of the actual file.
	 *
	 * @throws ApiException
	 *             if the Api call fails
	 * @throws UnsupportedEncodingException
	 *             the unsupported encoding exception
	 */
	@Test
	@Ignore("This test can only be ran if you're running the node locally. e.i: set the api client base url to localhost")
	public void downloadStreamSecureMessageFileUsingNemHashUsingGETTest()
			throws ApiException, UnsupportedEncodingException {
		String xPvkey = this.xPvkey;
		String nemhash = this.testnetSecureNemTxnHash;
		byte[] response = api.downloadStreamSecureMessageFileUsingNemHashUsingGET(nemhash, xPvkey);

		Assert.assertNotNull(new String(response, "UTF-8"));
	}

}
