/*
 * Proximax P2P Storage REST API
 * Proximax P2P Storage REST API
 *
 * OpenAPI spec version: v0.0.1
 * Contact: alvin.reyes@botmill.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.nem.xpx;

import io.nem.ApiCallback;
import io.nem.ApiClient;
import io.nem.ApiException;
import io.nem.ApiResponse;
import io.nem.Configuration;
import io.nem.Pair;
import io.nem.ProgressRequestBody;
import io.nem.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import io.nem.xpx.model.RequestAnnounceDataSignature;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PublishAndAnnounceApi {
    private ApiClient apiClient;

    public PublishAndAnnounceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PublishAndAnnounceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for announceRequestPublishDataSignatureUsingPOST
     * @param requestAnnounceDataSignature The Request Announce Data Signature Json Format (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call announceRequestPublishDataSignatureUsingPOSTCall(RequestAnnounceDataSignature requestAnnounceDataSignature, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = requestAnnounceDataSignature;
        
        // create path and map variables
        String localVarPath = "/publish/announce";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call announceRequestPublishDataSignatureUsingPOSTValidateBeforeCall(RequestAnnounceDataSignature requestAnnounceDataSignature, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = announceRequestPublishDataSignatureUsingPOSTCall(requestAnnounceDataSignature, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Announce the DataHash to NEM/P2P Storage and P2P Database
     * Endpoint that can be use to announce the data hash transaction. This will grab the signed BinaryTransaferTransaction and create the P2P Database Entry for the specific data hash / transaction.
     * @param requestAnnounceDataSignature The Request Announce Data Signature Json Format (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String announceRequestPublishDataSignatureUsingPOST(RequestAnnounceDataSignature requestAnnounceDataSignature) throws ApiException {
        ApiResponse<String> resp = announceRequestPublishDataSignatureUsingPOSTWithHttpInfo(requestAnnounceDataSignature);
        return resp.getData();
    }

    /**
     * Announce the DataHash to NEM/P2P Storage and P2P Database
     * Endpoint that can be use to announce the data hash transaction. This will grab the signed BinaryTransaferTransaction and create the P2P Database Entry for the specific data hash / transaction.
     * @param requestAnnounceDataSignature The Request Announce Data Signature Json Format (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> announceRequestPublishDataSignatureUsingPOSTWithHttpInfo(RequestAnnounceDataSignature requestAnnounceDataSignature) throws ApiException {
        com.squareup.okhttp.Call call = announceRequestPublishDataSignatureUsingPOSTValidateBeforeCall(requestAnnounceDataSignature, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Announce the DataHash to NEM/P2P Storage and P2P Database (asynchronously)
     * Endpoint that can be use to announce the data hash transaction. This will grab the signed BinaryTransaferTransaction and create the P2P Database Entry for the specific data hash / transaction.
     * @param requestAnnounceDataSignature The Request Announce Data Signature Json Format (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call announceRequestPublishDataSignatureUsingPOSTAsync(RequestAnnounceDataSignature requestAnnounceDataSignature, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = announceRequestPublishDataSignatureUsingPOSTValidateBeforeCall(requestAnnounceDataSignature, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for publishAndSendSingleFileToAddressUsingPOST
     * @param xPvkey The Sender&#39;s Private Key (required)
     * @param address The Receiver&#39;s Address without dash (&#39;-&#39;) (required)
     * @param messageType Message Type ( PLAIN or SECURE ) (required)
     * @param file The Multipart File (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call publishAndSendSingleFileToAddressUsingPOSTCall(String xPvkey, String address, String messageType, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/publish/single/to/{address}"
            .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (messageType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "messageType", messageType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPvkey != null)
        localVarHeaderParams.put("x-pvkey", apiClient.parameterToString(xPvkey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call publishAndSendSingleFileToAddressUsingPOSTValidateBeforeCall(String xPvkey, String address, String messageType, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xPvkey' is set
        if (xPvkey == null) {
            throw new ApiException("Missing the required parameter 'xPvkey' when calling publishAndSendSingleFileToAddressUsingPOST(Async)");
        }
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling publishAndSendSingleFileToAddressUsingPOST(Async)");
        }
        
        // verify the required parameter 'messageType' is set
        if (messageType == null) {
            throw new ApiException("Missing the required parameter 'messageType' when calling publishAndSendSingleFileToAddressUsingPOST(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling publishAndSendSingleFileToAddressUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = publishAndSendSingleFileToAddressUsingPOSTCall(xPvkey, address, messageType, file, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Store a single file that can only be access by the given address
     * This endpoint can be used to share a file to a specific address only.
     * @param xPvkey The Sender&#39;s Private Key (required)
     * @param address The Receiver&#39;s Address without dash (&#39;-&#39;) (required)
     * @param messageType Message Type ( PLAIN or SECURE ) (required)
     * @param file The Multipart File (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String publishAndSendSingleFileToAddressUsingPOST(String xPvkey, String address, String messageType, File file) throws ApiException {
        ApiResponse<String> resp = publishAndSendSingleFileToAddressUsingPOSTWithHttpInfo(xPvkey, address, messageType, file);
        return resp.getData();
    }

    /**
     * Store a single file that can only be access by the given address
     * This endpoint can be used to share a file to a specific address only.
     * @param xPvkey The Sender&#39;s Private Key (required)
     * @param address The Receiver&#39;s Address without dash (&#39;-&#39;) (required)
     * @param messageType Message Type ( PLAIN or SECURE ) (required)
     * @param file The Multipart File (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> publishAndSendSingleFileToAddressUsingPOSTWithHttpInfo(String xPvkey, String address, String messageType, File file) throws ApiException {
        com.squareup.okhttp.Call call = publishAndSendSingleFileToAddressUsingPOSTValidateBeforeCall(xPvkey, address, messageType, file, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Store a single file that can only be access by the given address (asynchronously)
     * This endpoint can be used to share a file to a specific address only.
     * @param xPvkey The Sender&#39;s Private Key (required)
     * @param address The Receiver&#39;s Address without dash (&#39;-&#39;) (required)
     * @param messageType Message Type ( PLAIN or SECURE ) (required)
     * @param file The Multipart File (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call publishAndSendSingleFileToAddressUsingPOSTAsync(String xPvkey, String address, String messageType, File file, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = publishAndSendSingleFileToAddressUsingPOSTValidateBeforeCall(xPvkey, address, messageType, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for publishAndSendSingleFileToAddressesUsingPOST
     * @param xPvkey The Sender&#39;s Private Key (optional)
     * @param addresses The List of receiving Addresses without dash (&#39;-&#39;) (optional)
     * @param messageType Message Type ( PLAIN or SECURE ) (optional)
     * @param file The Multipart File (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call publishAndSendSingleFileToAddressesUsingPOSTCall(String xPvkey, List<String> addresses, String messageType, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/publish/single/to/addresses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (addresses != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "addresses", addresses));
        if (messageType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "messageType", messageType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPvkey != null)
        localVarHeaderParams.put("x-pvkey", apiClient.parameterToString(xPvkey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call publishAndSendSingleFileToAddressesUsingPOSTValidateBeforeCall(String xPvkey, List<String> addresses, String messageType, File file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = publishAndSendSingleFileToAddressesUsingPOSTCall(xPvkey, addresses, messageType, file, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Store a single file that can only be access by the given addresses
     * This endpoint can be used to exclusively share files across a set of given addresses. This means that the file that&#39;s published here can only be viewed or downloaded by the given addresses including the uploader.
     * @param xPvkey The Sender&#39;s Private Key (optional)
     * @param addresses The List of receiving Addresses without dash (&#39;-&#39;) (optional)
     * @param messageType Message Type ( PLAIN or SECURE ) (optional)
     * @param file The Multipart File (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String publishAndSendSingleFileToAddressesUsingPOST(String xPvkey, List<String> addresses, String messageType, File file) throws ApiException {
        ApiResponse<String> resp = publishAndSendSingleFileToAddressesUsingPOSTWithHttpInfo(xPvkey, addresses, messageType, file);
        return resp.getData();
    }

    /**
     * Store a single file that can only be access by the given addresses
     * This endpoint can be used to exclusively share files across a set of given addresses. This means that the file that&#39;s published here can only be viewed or downloaded by the given addresses including the uploader.
     * @param xPvkey The Sender&#39;s Private Key (optional)
     * @param addresses The List of receiving Addresses without dash (&#39;-&#39;) (optional)
     * @param messageType Message Type ( PLAIN or SECURE ) (optional)
     * @param file The Multipart File (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> publishAndSendSingleFileToAddressesUsingPOSTWithHttpInfo(String xPvkey, List<String> addresses, String messageType, File file) throws ApiException {
        com.squareup.okhttp.Call call = publishAndSendSingleFileToAddressesUsingPOSTValidateBeforeCall(xPvkey, addresses, messageType, file, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Store a single file that can only be access by the given addresses (asynchronously)
     * This endpoint can be used to exclusively share files across a set of given addresses. This means that the file that&#39;s published here can only be viewed or downloaded by the given addresses including the uploader.
     * @param xPvkey The Sender&#39;s Private Key (optional)
     * @param addresses The List of receiving Addresses without dash (&#39;-&#39;) (optional)
     * @param messageType Message Type ( PLAIN or SECURE ) (optional)
     * @param file The Multipart File (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call publishAndSendSingleFileToAddressesUsingPOSTAsync(String xPvkey, List<String> addresses, String messageType, File file, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = publishAndSendSingleFileToAddressesUsingPOSTValidateBeforeCall(xPvkey, addresses, messageType, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
