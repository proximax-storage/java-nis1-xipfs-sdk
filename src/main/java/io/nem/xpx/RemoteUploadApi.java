/*
 * Proximax P2P Storage REST API
 * Proximax P2P Storage REST API
 *
 * OpenAPI spec version: v0.0.1
 * Contact: alvin.reyes@botmill.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.nem.xpx;

import io.nem.Configuration;
import io.nem.Pair;
import io.nem.ProgressRequestBody;
import io.nem.ProgressResponseBody;
import io.nem.api.ApiCallback;
import io.nem.api.ApiClient;
import io.nem.api.ApiException;
import io.nem.api.ApiResponse;

import com.google.gson.reflect.TypeToken;
import java.io.IOException;
import io.nem.xpx.intf.UploadApi;
import java.io.File;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RemoteUploadApi implements UploadApi {
	
	private ApiClient apiClient;

    public RemoteUploadApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RemoteUploadApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cleanupPinnedContentUsingPOST
     * @param multihash The pinned multihash (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cleanupPinnedContentUsingPOSTCall(String multihash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/upload/cleanup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (multihash != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "multihash", multihash));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cleanupPinnedContentUsingPOSTValidateBeforeCall(String multihash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'multihash' is set
        if (multihash == null) {
            throw new ApiException("Missing the required parameter 'multihash' when calling cleanupPinnedContentUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = cleanupPinnedContentUsingPOSTCall(multihash, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Calls the garbage clean up and tries to unpin the given hash
     * This endpoint can be used to generates the datahash and uploads the file in the process.
     * @param multihash The pinned multihash (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String cleanupPinnedContentUsingPOST(String multihash) throws ApiException {
        ApiResponse<String> resp = cleanupPinnedContentUsingPOSTWithHttpInfo(multihash);
        return resp.getData();
    }

    /**
     * Calls the garbage clean up and tries to unpin the given hash
     * This endpoint can be used to generates the datahash and uploads the file in the process.
     * @param multihash The pinned multihash (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> cleanupPinnedContentUsingPOSTWithHttpInfo(String multihash) throws ApiException {
        com.squareup.okhttp.Call call = cleanupPinnedContentUsingPOSTValidateBeforeCall(multihash, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Calls the garbage clean up and tries to unpin the given hash (asynchronously)
     * This endpoint can be used to generates the datahash and uploads the file in the process.
     * @param multihash The pinned multihash (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cleanupPinnedContentUsingPOSTAsync(String multihash, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cleanupPinnedContentUsingPOSTValidateBeforeCall(multihash, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadBase64StringBinaryUsingPOST
     * @param data Base64 String representation of the data object to be uploaded (required)
     * @param contentType Content Type of the Data. If none is given, system will try to detect. (optional)
     * @param name Custom Name of the data. If none is specified, timestamp will be used. (optional)
     * @param keywords Comma delimited Keyword/Tags (optional)
     * @param metadata Additional data in a JSON Format (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadBase64StringBinaryUsingPOSTCall(String data, String contentType, String name, String keywords, String metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/upload/base64/binary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (contentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "contentType", contentType));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (keywords != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "keywords", keywords));
        if (metadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "metadata", metadata));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadBase64StringBinaryUsingPOSTValidateBeforeCall(String data, String contentType, String name, String keywords, String metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling uploadBase64StringBinaryUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = uploadBase64StringBinaryUsingPOSTCall(data, contentType, name, keywords, metadata, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Uploads a Base64 encoded String binary file to the IPFS/P2P Storage Network
     * This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
     * @param data Base64 String representation of the data object to be uploaded (required)
     * @param contentType Content Type of the Data. If none is given, system will try to detect. (optional)
     * @param name Custom Name of the data. If none is specified, timestamp will be used. (optional)
     * @param keywords Comma delimited Keyword/Tags (optional)
     * @param metadata Additional data in a JSON Format (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object uploadBase64StringBinaryUsingPOST(String data, String contentType, String name, String keywords, String metadata) throws ApiException {
        ApiResponse<Object> resp = uploadBase64StringBinaryUsingPOSTWithHttpInfo(data, contentType, name, keywords, metadata);
        return resp.getData();
    }

    /**
     * Uploads a Base64 encoded String binary file to the IPFS/P2P Storage Network
     * This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
     * @param data Base64 String representation of the data object to be uploaded (required)
     * @param contentType Content Type of the Data. If none is given, system will try to detect. (optional)
     * @param name Custom Name of the data. If none is specified, timestamp will be used. (optional)
     * @param keywords Comma delimited Keyword/Tags (optional)
     * @param metadata Additional data in a JSON Format (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> uploadBase64StringBinaryUsingPOSTWithHttpInfo(String data, String contentType, String name, String keywords, String metadata) throws ApiException {
        com.squareup.okhttp.Call call = uploadBase64StringBinaryUsingPOSTValidateBeforeCall(data, contentType, name, keywords, metadata, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Uploads a Base64 encoded String binary file to the IPFS/P2P Storage Network (asynchronously)
     * This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
     * @param data Base64 String representation of the data object to be uploaded (required)
     * @param contentType Content Type of the Data. If none is given, system will try to detect. (optional)
     * @param name Custom Name of the data. If none is specified, timestamp will be used. (optional)
     * @param keywords Comma delimited Keyword/Tags (optional)
     * @param metadata Additional data in a JSON Format (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadBase64StringBinaryUsingPOSTAsync(String data, String contentType, String name, String keywords, String metadata, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadBase64StringBinaryUsingPOSTValidateBeforeCall(data, contentType, name, keywords, metadata, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadBytesBinaryUsingPOST
     * @param data Base64 byte[] representation of the data object to be uploaded (required)
     * @param contentType Content Type of the Data. If none is given, system will try to detect. (optional)
     * @param name Custom Name of the data. If none is specified, timestamp will be used. (optional)
     * @param keywords Comma delimited Keyword/Tags (optional)
     * @param metadata Additional data in a JSON Format (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadBytesBinaryUsingPOSTCall(byte[] data, String contentType, String name, String keywords, String metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/upload/bytes/binary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (contentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "contentType", contentType));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (keywords != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "keywords", keywords));
        if (metadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "metadata", metadata));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadBytesBinaryUsingPOSTValidateBeforeCall(byte[] data, String contentType, String name, String keywords, String metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling uploadBytesBinaryUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = uploadBytesBinaryUsingPOSTCall(data, contentType, name, keywords, metadata, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Uploads a Base64 encoded byte[] binary file to the IPFS/P2P Storage Network
     * This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
     * @param data Base64 byte[] representation of the data object to be uploaded (required)
     * @param contentType Content Type of the Data. If none is given, system will try to detect. (optional)
     * @param name Custom Name of the data. If none is specified, timestamp will be used. (optional)
     * @param keywords Comma delimited Keyword/Tags (optional)
     * @param metadata Additional data in a JSON Format (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object uploadBytesBinaryUsingPOST(byte[] data, String contentType, String name, String keywords, String metadata) throws ApiException {
        ApiResponse<Object> resp = uploadBytesBinaryUsingPOSTWithHttpInfo(data, contentType, name, keywords, metadata);
        return resp.getData();
    }

    /**
     * Uploads a Base64 encoded byte[] binary file to the IPFS/P2P Storage Network
     * This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
     * @param data Base64 byte[] representation of the data object to be uploaded (required)
     * @param contentType Content Type of the Data. If none is given, system will try to detect. (optional)
     * @param name Custom Name of the data. If none is specified, timestamp will be used. (optional)
     * @param keywords Comma delimited Keyword/Tags (optional)
     * @param metadata Additional data in a JSON Format (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> uploadBytesBinaryUsingPOSTWithHttpInfo(byte[] data, String contentType, String name, String keywords, String metadata) throws ApiException {
        com.squareup.okhttp.Call call = uploadBytesBinaryUsingPOSTValidateBeforeCall(data, contentType, name, keywords, metadata, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Uploads a Base64 encoded byte[] binary file to the IPFS/P2P Storage Network (asynchronously)
     * This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
     * @param data Base64 byte[] representation of the data object to be uploaded (required)
     * @param contentType Content Type of the Data. If none is given, system will try to detect. (optional)
     * @param name Custom Name of the data. If none is specified, timestamp will be used. (optional)
     * @param keywords Comma delimited Keyword/Tags (optional)
     * @param metadata Additional data in a JSON Format (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadBytesBinaryUsingPOSTAsync(byte[] data, String contentType, String name, String keywords, String metadata, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadBytesBinaryUsingPOSTValidateBeforeCall(data, contentType, name, keywords, metadata, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadFileUsingPOST
     * @param file The Multipart File that will be stored on the P2P Storage Network (required)
     * @param name Custom Name of the data. If none is specified, timestamp will be used. (optional)
     * @param keywords Comma delimited Keyword/Tags (optional)
     * @param metadata Additional data in a JSON Format (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadFileUsingPOSTCall(File file, String name, String keywords, String metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/upload/file";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (keywords != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "keywords", keywords));
        if (metadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "metadata", metadata));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadFileUsingPOSTValidateBeforeCall(File file, String name, String keywords, String metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling uploadFileUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = uploadFileUsingPOSTCall(file, name, keywords, metadata, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upload the File to the IPFS/P2P Storage Network
     * This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
     * @param file The Multipart File that will be stored on the P2P Storage Network (required)
     * @param name Custom Name of the data. If none is specified, timestamp will be used. (optional)
     * @param keywords Comma delimited Keyword/Tags (optional)
     * @param metadata Additional data in a JSON Format (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object uploadFileUsingPOST(File file, String name, String keywords, String metadata) throws ApiException {
        ApiResponse<Object> resp = uploadFileUsingPOSTWithHttpInfo(file, name, keywords, metadata);
        return resp.getData();
    }

    /**
     * Upload the File to the IPFS/P2P Storage Network
     * This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
     * @param file The Multipart File that will be stored on the P2P Storage Network (required)
     * @param name Custom Name of the data. If none is specified, timestamp will be used. (optional)
     * @param keywords Comma delimited Keyword/Tags (optional)
     * @param metadata Additional data in a JSON Format (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> uploadFileUsingPOSTWithHttpInfo(File file, String name, String keywords, String metadata) throws ApiException {
        com.squareup.okhttp.Call call = uploadFileUsingPOSTValidateBeforeCall(file, name, keywords, metadata, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload the File to the IPFS/P2P Storage Network (asynchronously)
     * This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
     * @param file The Multipart File that will be stored on the P2P Storage Network (required)
     * @param name Custom Name of the data. If none is specified, timestamp will be used. (optional)
     * @param keywords Comma delimited Keyword/Tags (optional)
     * @param metadata Additional data in a JSON Format (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadFileUsingPOSTAsync(File file, String name, String keywords, String metadata, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadFileUsingPOSTValidateBeforeCall(file, name, keywords, metadata, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadGenerateAndSignUsingPOST
     * @param xPvkey Sender Private Key (optional)
     * @param xPubkey Receiver Public Key (optional)
     * @param messageType Message Type ( PLAIN or SECURE ) (optional)
     * @param file The Multipart File (optional)
     * @param keywords Comma delimited Keyword/Tags (optional)
     * @param metadata Json Format Data Structure (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadGenerateAndSignUsingPOSTCall(String xPvkey, String xPubkey, String messageType, File file, String keywords, String metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/upload/generate-sign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (messageType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "messageType", messageType));
        if (keywords != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "keywords", keywords));
        if (metadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "metadata", metadata));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xPvkey != null)
        localVarHeaderParams.put("x-pvkey", apiClient.parameterToString(xPvkey));
        if (xPubkey != null)
        localVarHeaderParams.put("x-pubkey", apiClient.parameterToString(xPubkey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadGenerateAndSignUsingPOSTValidateBeforeCall(String xPvkey, String xPubkey, String messageType, File file, String keywords, String metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = uploadGenerateAndSignUsingPOSTCall(xPvkey, xPubkey, messageType, file, keywords, metadata, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * uploadGenerateAndSign
     * 
     * @param xPvkey Sender Private Key (optional)
     * @param xPubkey Receiver Public Key (optional)
     * @param messageType Message Type ( PLAIN or SECURE ) (optional)
     * @param file The Multipart File (optional)
     * @param keywords Comma delimited Keyword/Tags (optional)
     * @param metadata Json Format Data Structure (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String uploadGenerateAndSignUsingPOST(String xPvkey, String xPubkey, String messageType, File file, String keywords, String metadata) throws ApiException {
        ApiResponse<String> resp = uploadGenerateAndSignUsingPOSTWithHttpInfo(xPvkey, xPubkey, messageType, file, keywords, metadata);
        return resp.getData();
    }

    /**
     * uploadGenerateAndSign
     * 
     * @param xPvkey Sender Private Key (optional)
     * @param xPubkey Receiver Public Key (optional)
     * @param messageType Message Type ( PLAIN or SECURE ) (optional)
     * @param file The Multipart File (optional)
     * @param keywords Comma delimited Keyword/Tags (optional)
     * @param metadata Json Format Data Structure (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> uploadGenerateAndSignUsingPOSTWithHttpInfo(String xPvkey, String xPubkey, String messageType, File file, String keywords, String metadata) throws ApiException {
        com.squareup.okhttp.Call call = uploadGenerateAndSignUsingPOSTValidateBeforeCall(xPvkey, xPubkey, messageType, file, keywords, metadata, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * uploadGenerateAndSign (asynchronously)
     * 
     * @param xPvkey Sender Private Key (optional)
     * @param xPubkey Receiver Public Key (optional)
     * @param messageType Message Type ( PLAIN or SECURE ) (optional)
     * @param file The Multipart File (optional)
     * @param keywords Comma delimited Keyword/Tags (optional)
     * @param metadata Json Format Data Structure (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadGenerateAndSignUsingPOSTAsync(String xPvkey, String xPubkey, String messageType, File file, String keywords, String metadata, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadGenerateAndSignUsingPOSTValidateBeforeCall(xPvkey, xPubkey, messageType, file, keywords, metadata, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadPlainTextUsingPOST
     * @param text A Free Form Text based data (required)
     * @param name Custom Name of the data. If none is specified, timestamp will be used. (optional)
     * @param encoding Text Data Encoding. Default: UTF-8 (optional)
     * @param keywords Comma delimited Keyword/Tags (optional)
     * @param metadata Additional data in a JSON Format (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadPlainTextUsingPOSTCall(String text, String name, String encoding, String keywords, String metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = text;
        
        // create path and map variables
        String localVarPath = "/upload/text";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (encoding != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "encoding", encoding));
        if (keywords != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "keywords", keywords));
        if (metadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "metadata", metadata));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadPlainTextUsingPOSTValidateBeforeCall(String text, String name, String encoding, String keywords, String metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling uploadPlainTextUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = uploadPlainTextUsingPOSTCall(text, name, encoding, keywords, metadata, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upload the Text to the IPFS/P2P Storage Network
     * This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
     * @param text A Free Form Text based data (required)
     * @param name Custom Name of the data. If none is specified, timestamp will be used. (optional)
     * @param encoding Text Data Encoding. Default: UTF-8 (optional)
     * @param keywords Comma delimited Keyword/Tags (optional)
     * @param metadata Additional data in a JSON Format (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object uploadPlainTextUsingPOST(String text, String name, String encoding, String keywords, String metadata) throws ApiException {
        ApiResponse<Object> resp = uploadPlainTextUsingPOSTWithHttpInfo(text, name, encoding, keywords, metadata);
        return resp.getData();
    }

    /**
     * Upload the Text to the IPFS/P2P Storage Network
     * This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
     * @param text A Free Form Text based data (required)
     * @param name Custom Name of the data. If none is specified, timestamp will be used. (optional)
     * @param encoding Text Data Encoding. Default: UTF-8 (optional)
     * @param keywords Comma delimited Keyword/Tags (optional)
     * @param metadata Additional data in a JSON Format (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> uploadPlainTextUsingPOSTWithHttpInfo(String text, String name, String encoding, String keywords, String metadata) throws ApiException {
        com.squareup.okhttp.Call call = uploadPlainTextUsingPOSTValidateBeforeCall(text, name, encoding, keywords, metadata, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload the Text to the IPFS/P2P Storage Network (asynchronously)
     * This endpoint can be used to generate the data that will be injected to the NEM Blockchain.
     * @param text A Free Form Text based data (required)
     * @param name Custom Name of the data. If none is specified, timestamp will be used. (optional)
     * @param encoding Text Data Encoding. Default: UTF-8 (optional)
     * @param keywords Comma delimited Keyword/Tags (optional)
     * @param metadata Additional data in a JSON Format (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadPlainTextUsingPOSTAsync(String text, String name, String encoding, String keywords, String metadata, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadPlainTextUsingPOSTValidateBeforeCall(text, name, encoding, keywords, metadata, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
