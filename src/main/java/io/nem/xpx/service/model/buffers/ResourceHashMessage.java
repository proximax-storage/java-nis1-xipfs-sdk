// automatically generated by the FlatBuffers compiler, do not modify
package io.nem.xpx.service.model.buffers;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

@SuppressWarnings("unused")
public final class ResourceHashMessage extends Table {
  public static ResourceHashMessage getRootAsResourceHashMessage(ByteBuffer _bb) { return getRootAsResourceHashMessage(_bb, new ResourceHashMessage()); }
  public static ResourceHashMessage getRootAsResourceHashMessage(ByteBuffer _bb, ResourceHashMessage obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public ResourceHashMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String digest() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer digestAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public String hash() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer hashAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public String keywords() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer keywordsAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public String metaData() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer metaDataAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public String name() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public int size() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public long timestamp() { int o = __offset(16); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public String type() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }

  public static int createResourceHashMessage(FlatBufferBuilder builder,
      int digestOffset,
      int hashOffset,
      int keywordsOffset,
      int metaDataOffset,
      int nameOffset,
      int size,
      long timestamp,
      int typeOffset) {
    builder.startObject(8);
    ResourceHashMessage.addTimestamp(builder, timestamp);
    ResourceHashMessage.addType(builder, typeOffset);
    ResourceHashMessage.addSize(builder, size);
    ResourceHashMessage.addName(builder, nameOffset);
    ResourceHashMessage.addMetaData(builder, metaDataOffset);
    ResourceHashMessage.addKeywords(builder, keywordsOffset);
    ResourceHashMessage.addHash(builder, hashOffset);
    ResourceHashMessage.addDigest(builder, digestOffset);
    return ResourceHashMessage.endResourceHashMessage(builder);
  }

  public static void startResourceHashMessage(FlatBufferBuilder builder) { builder.startObject(8); }
  public static void addDigest(FlatBufferBuilder builder, int digestOffset) { builder.addOffset(0, digestOffset, 0); }
  public static void addHash(FlatBufferBuilder builder, int hashOffset) { builder.addOffset(1, hashOffset, 0); }
  public static void addKeywords(FlatBufferBuilder builder, int keywordsOffset) { builder.addOffset(2, keywordsOffset, 0); }
  public static void addMetaData(FlatBufferBuilder builder, int metaDataOffset) { builder.addOffset(3, metaDataOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(4, nameOffset, 0); }
  public static void addSize(FlatBufferBuilder builder, int size) { builder.addInt(5, size, 0); }
  public static void addTimestamp(FlatBufferBuilder builder, long timestamp) { builder.addLong(6, timestamp, 0L); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(7, typeOffset, 0); }
  public static int endResourceHashMessage(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishResourceHashMessageBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
}

